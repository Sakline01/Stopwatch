{"version":3,"sources":["components/Time.jsx","components/ControlButtons.jsx","components/Stopwatch.jsx","App.js","reportWebVitals.js","index.js"],"names":["Time","time","className","Math","floor","slice","ControlButtons","props","StartButton","onClick","handleStart","ActiveButtons","handleReset","handlePauseResume","isPaused","active","Stopwatch","useState","isActive","setIsActive","setIsPaused","setTime","useEffect","interval","setInterval","clearInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAkBeA,EAhBF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACX,OACI,gCACI,uBAAMC,UAAU,SAAhB,WACF,IAAMC,KAAKC,MAAOH,EAAO,IAAS,KAAKI,OAAO,GAD5C,OAGN,uBAAMH,UAAU,SAAhB,WACI,IAAMC,KAAKC,MAAOH,EAAO,IAAQ,KAAKI,OAAO,GADjD,OAGA,sBAAMH,UAAU,kBAAhB,UACI,IAAQD,EAAO,GAAM,KAAMI,OAAO,S,MCT7B,SAASC,EAAeC,GACrC,IAAMC,EACJ,qBAAKN,UAAU,wBACVO,QAASF,EAAMG,YADpB,mBAKIC,EACJ,sBAAKT,UAAU,UAAf,UACE,qBAAKA,UAAU,cACVO,QAASF,EAAMK,YADpB,mBAIA,qBAAKV,UAAU,cACVO,QAASF,EAAMM,kBADpB,SAEGN,EAAMO,SAAW,SAAW,aAKnC,OACE,qBAAKZ,UAAU,kBAAf,SACE,8BAAMK,EAAMQ,OAASJ,EAAgBH,M,UCyB5BQ,EA7CG,WAClB,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOH,EAAP,KAAiBM,EAAjB,KACA,EAAwBH,mBAAS,GAAjC,mBAAOhB,EAAP,KAAaoB,EAAb,KAEEC,qBAAU,WACR,IAAIC,EAAW,KASf,OAPIL,IAAyB,IAAbJ,EACdS,EAAWC,aAAY,WACrBH,GAAQ,SAACpB,GAAD,OAAUA,EAAO,QACxB,IAEHwB,cAAcF,GAET,WACLE,cAAcF,MAEf,CAACL,EAAUJ,IAaZ,OACI,sBAAKZ,UAAU,aAAf,UACA,cAAC,EAAD,CAAMD,KAAMA,IACZ,cAAC,EAAD,CACAc,OAAQG,EACRJ,SAAUA,EACVJ,YAlBc,WAClBS,GAAY,GACZC,GAAY,IAiBRP,kBAfoB,WACxBO,GAAaN,IAeTF,YAbc,WAClBO,GAAY,GACZE,EAAQ,UCtBGK,MARf,WACE,OACE,qBAAKxB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a2541fe8.chunk.js","sourcesContent":["import React from 'react';\nimport './Time.css';\nconst Time = ({time}) => {\n    return (\n        <div>\n            <span className=\"digits\">\n        {(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:\n      </span>\n      <span className=\"digits\">\n        {(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}.\n      </span>\n      <span className=\"digits mili-sec\">\n        {(\"0\" + ((time / 10) % 100)).slice(-2)}\n      </span>\n        </div>\n    );\n}\n\nexport default Time;\n","import React from \"react\";\nimport \"./ControlButtons.css\";\n  \nexport default function ControlButtons(props) {\n  const StartButton = (\n    <div className=\"btn btn-one btn-start\"\n         onClick={props.handleStart}>\n      Start\n    </div>\n  );\n  const ActiveButtons = (\n    <div className=\"btn-grp\">\n      <div className=\"btn btn-two\" \n           onClick={props.handleReset}>\n        Reset\n      </div>\n      <div className=\"btn btn-one\" \n           onClick={props.handlePauseResume}>\n        {props.isPaused ? \"Resume\" : \"Pause\"}\n      </div>\n    </div>\n  );\n  \n  return (\n    <div className=\"Control-Buttons\">\n      <div>{props.active ? ActiveButtons : StartButton}</div>\n    </div>\n  );\n}\n","import React,{useState,useEffect} from 'react';\nimport Time from './Time';\nimport ControlButtons from './ControlButtons';\nimport \"./Stopwatch.css\"\n\nconst Stopwatch = () => {\nconst [isActive, setIsActive] = useState(false);\nconst [isPaused, setIsPaused] = useState(true);\nconst [time, setTime] = useState(0);\n  \n  useEffect(() => {\n    let interval = null;\n  \n    if (isActive && isPaused === false) {\n      interval = setInterval(() => {\n        setTime((time) => time + 10);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isActive, isPaused]);\n  const handleStart = () => {\n    setIsActive(true);\n    setIsPaused(false);\n  };\n  const handlePauseResume = () => {\n    setIsPaused(!isPaused);\n  };\n  const handleReset = () => {\n    setIsActive(false);\n    setTime(0);\n  };\n  \n    return (\n        <div className=\"stop-watch\">\n        <Time time={time}/>\n        <ControlButtons\n        active={isActive}\n        isPaused={isPaused}\n        handleStart={handleStart}\n        handlePauseResume={handlePauseResume}\n        handleReset={handleReset}\n      />\n        </div>\n    );\n}\n\nexport default Stopwatch;\n","import './App.css';\nimport Stopwatch from './components/Stopwatch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stopwatch/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}